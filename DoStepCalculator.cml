class DoStepCalculator = 
begin

state 
currentCommunicationPoint : real := 0
periodLength : real
tillNextPeriod : real
--endTime : real := 0

operations

public DoStepCalculator: real ==> DoStepCalculator
DoStepCalculator(periodLength_) ==
(
	periodLength := periodLength_;
	tillNextPeriod := periodLength_
)

public CalcDoSteps: real * real ==> int
CalcDoSteps(ccp, ss) == 
(
	let newCcp = ccp + ss,
		diff = newCcp - currentCommunicationPoint
	in
	(	
		currentCommunicationPoint := newCcp;
		// 1+ steps
		if diff >= tillNextPeriod
		then 
			let 
				mk_(doSteps,tillNextPeriod') = CalcMultipleDoSteps(diff, tillNextPeriod, periodLength)
			in 
			(	
				tillNextPeriod := tillNextPeriod';
				return doSteps
			)
		// No step, but still progress.
		else
			(tillNextPeriod := tillNextPeriod - diff;
			return 0)
	)			
)
pre canBeInvoked(currentCommunicationPoint, ccp)

--public setEndTime : real ==> ()
--setEndTime(endTime_) == endTime := endTime_

public canBeInvokedExt: real ==> bool
canBeInvokedExt(ccp) == canBeInvoked(currentCommunicationPoint, ccp)
	
public getCCP: () ==> real 
getCCP() == return currentCommunicationPoint

functions
private canBeInvoked : real * real -> bool
	canBeInvoked(ccp, ccp') == ccp' >= ccp
	
private 
	CalcMultipleDoSteps : real * real * real -> (int * real)
	CalcMultipleDoSteps(timeIncrease, tillNextPeriod, periodLength) == 
		let remTimeAfterFirstPeriod = timeIncrease - tillNextPeriod,
			doStepsReal = remTimeAfterFirstPeriod / periodLength
		in
			mk_((floor doStepsReal)+1, periodLength - (doStepsReal mod periodLength))
			
end