process FMU_Proc = id_ : token @
begin
types

values 

state
	fmu : [AFMU] := nil
	id : token := id_
	io : [IO] := nil
	
actions
	-- NOTE: Pattern matching tuples does not work

	ReturnStatus = s : fmi2Status @ fmi2StatusReturn ! s -> Skip

	Instantiate = fmi2Instantiate ! id -> 
	(
		dcl x : Instantiator @ 
		x := new Instantiator();
		fmu := x.instantiate(id);
		let s = fmu.Instantiate() in
			ReturnStatus(s)
	)
	
	EnterInitMode = fmi2EnterInitializationMode ! id -> 
		let s = fmu.EnterInitializationMode() in 
			ReturnStatus(s)
	
	ExitInitMode = fmi2ExitInitializationMode ! id -> 
		let s = fmu.ExitInitializationMode() in
			ReturnStatus(s)
		
	GetReal = 
		fmi2GetReal ! id ? x ->		
			let r : realReturn = fmu.getOutput(x,<real>) in			
				fmi2GetRealReturn ! (r.#1) ! (r.#2) -> Skip
		
	GetBoolean = 
		fmi2GetBoolean ! id ? x ->
			let r : booleanReturn = fmu.getOutput(x,<boolean>) in
				fmi2GetBooleanReturn ! (r.#1) ! (r.#2) -> Skip
	
	GenericSet = vRef : valueReference, v: svValue, t: SVType @
		let s = fmu.setInput(vRef,v,t) in	ReturnStatus(s)		
	
	SetBoolean = fmi2SetBoolean ! id ? x ? y -> GenericSet(x,y,<boolean>)
	
	SetReal = fmi2SetReal ! id ? x ? y -> GenericSet(x,y,<real>)
	
	SetInteger = 
		fmi2SetInteger ! id ? x ? y -> GenericSet(x,y,<integer>)
		
	DoStep = 
		fmi2DoStep ! id ? ccp ? ss ->		
			let s : fmi2Status = fmu.doStep(ccp, ss) in			
				ReturnStatus(s)		
		
	Terminate = fmi2Terminate ! id -> Skip
	
	SimulationLoop = (SetBoolean [] GetBoolean [] GetReal [] SetReal [] DoStep);SimulationLoop [] Terminate
	
@ Instantiate; (Terminate [] EnterInitMode);(Terminate [] ExitInitMode);SimulationLoop

end