process fmu_proc = id_ : token @
begin
values 

state
	fmu : [FMUInterface] := nil
	id : token := id_
	
actions
	INIT = 
	(
		dcl x : Instantiator @ x := new Instantiator();
		fmu := x.instantiate(id)
	)
	SetReal = 
		fmi2SetReal ! id ? x ? y -> 
		(
			dcl ret : fmi2Status @ ret := fmu.setInputReal(x,y);
			fmi2StatusReturn!ret -> Skip
		)
		
	GetBoolean = 
		fmi2GetBoolean ! id ? x ->
		(
			dcl ret : booleanReturn @ ret := fmu.getBoolean(x);
			fmi2GetBooleanReturn ! (ret.#1) ! (ret.#2) -> Skip
		)
	DoStep = 
		fmi2DoStep ! id ? ccp ? ss ->
		(
			dcl ret : fmi2Status @ ret := fmu.doStep(ccp, ss);
			fmi2StatusReturn ! ret -> Skip
		)

	Terminate = fmi2Terminate ! id -> Skip
	
	SimulationLoop = (GetBoolean;SimulationLoop) [] (SetReal;SimulationLoop) [] (DoStep;SimulationLoop) [] (Terminate;Skip)
	
@ INIT; SimulationLoop

end