class FMU_DE extends AFMU = 
begin

state
	level : real := 0.0
	valve : bool := true
	doStepCalc : [DoStepCalculator] := nil 
	period : real := 0.5
	minLevel : real := 1.0
	maxLevel : real := 2.0
	io : [IO] := nil

operations
	public FMU_DE:() ==> FMU_DE
	FMU_DE () == 
	(
		io := new IO();
		let x = io.echo("ct - getReal") in
		doStepCalc := new DoStepCalculator(period)
	)	
	
	public setInputReal: valueReference * real ==> fmi2Status
	setInputReal(vRef,v) == 
		if vRef = 2 
		then 
		(
			level := v;
			return <fmi2OK>
		) 
		else 
			return <fmi2Error>
	
	public getBoolean : valueReference ==> booleanReturn
	getBoolean(vRef) == 			
		if vRef = 1 
		then 
			return mk_(valve,<fmi2OK>)
		else
			return mk_(false,<fmi2Error>)
	
	public doStep : currentCommunicationPoint * communicationStepSize ==> fmi2Status
	doStep(t, h) == 
		if doStepCalc.isCcpValid(t)
		 then 
		 (
		 	let steps: int = doStepCalc.calcDoSteps(t,h) in
		 	(
		 		controlLogic(steps);
			 	return <fmi2OK>
		 	)
		 )
		 else return <fmi2Error>
	
	private controlLogic: int ==> ()
	controlLogic(steps) == 
		for i = 1 to steps do
			if level > maxLevel
			then
				valve := true
			else 
				valve := false

end