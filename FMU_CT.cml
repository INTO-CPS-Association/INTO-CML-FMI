class FMU_CT extends AFMU = 
begin

state
	level : real := 1.5
	valveControl : bool := false
	doStepCalc : [DoStepCalculator] := nil 
	period : real := 0.5		
	
operations
	public FMU_CT: set of ScalarVariable ==> FMU_CT
	FMU_CT(md) == 
	(
		MD := md;
		doStepCalc := new DoStepCalculator(period)		
	)
	
	protected fmu_setInputBoolean: valueReference * bool ==> fmi2Status
	fmu_setInputBoolean(vRef,v) == 
		if vRef = 1 
		then 
		(
			valveControl := v;
			return <fmi2OK>
		) 
		else return <fmi2Error>
	
	protected fmu_getReal : valueReference ==> realReturn
	fmu_getReal(vRef) == 
			if vRef = 2 
			then return mk_(level,<fmi2OK>)			
			else return mk_(level,<fmi2Error>)		
	
	public doStep : currentCommunicationPoint * communicationStepSize ==> fmi2Status
	doStep(t, h) == 
		if doStepCalc.isCcpValid(t)
		 then 
		 	let steps: int = doStepCalc.calcDoSteps(t,h) in
		 	(
		 		controlLogic(steps);
			 	return <fmi2OK>
		 	)
		 else return <fmi2Error>
	
	private controlLogic: int ==> ()
	controlLogic(steps) == 
		for i = 1 to steps do
			if valveControl
			then level := level - 0.4 
			else level := level + 0.4 

end